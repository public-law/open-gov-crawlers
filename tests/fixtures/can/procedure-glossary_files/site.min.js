"use strict";

// Used to not overflow History when no change on search controls
var prevUrlQueryString = window.location.href;
function addUrlParameterValue(name,value) {

    var url = document.location.href;
    var currentValue = getUrlParameterValue(name);

    if (currentValue == '') {
        //add
        if (url.indexOf("?") != -1) {
            // there is parameter, add &
            url = url + '&' + name + '=' + encodeURIComponent(value);
        } else {
            //no Parameter, add ?
            url = url + '?' + name + '=' + encodeURIComponent(value);
        }
    } else {
        //repalce value
        var oldValue = encodeURIComponent(getUrlParameterValue(name));
        url.replace(name + '=' + currentValue, name + '=' + encodeURIComponent(value));
    }

    if (prevUrlQueryString !== url) {
        prevUrlQueryString = url;

        // This will create a new entry in the browser's history, without reloading
        window.history.pushState({ state: 1 }, '', url);

        // This will replace the current entry in the browser's history, without reloading
        window.history.replaceState({ state: 1 }, '', url);
    }
}


function getUrlParameterValue(name) {
    name = name.replace(/[[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
    var results = regex.exec(location.search);

    return results === null ? "" : decodeURI(results[1]);
}

function removeValuefromParameter(list, value, separator) {
    separator = separator || ",";
    var values = list.split(separator);
    for (var i = 0; i < values.length; i++) {
        if (values[i] === value) {
            values.splice(i, 1);
            return values.join(separator);
        }
    }
    return list;
}

//Function used to remove url Parameter
function removeURLParameter(key) {

    var url = document.location.href;

    //Get query string value
    var searchUrl = location.search;

    if (key !== "") {
        var oldValue = encodeURIComponent(getUrlParameterValue(key));
        var removeVal = key + "=" + oldValue;
        if (searchUrl.indexOf("?" + removeVal + "&") !== -1) {
            url = url.replace("?" + removeVal + "&", "?");
        } else if (searchUrl.indexOf("&" + removeVal + "&") !== -1) {
            url = url.replace("&" + removeVal + "&", "&");
        } else if (searchUrl.indexOf("?" + removeVal) !== -1) {
            url = url.replace("?" + removeVal, "");
        } else if (searchUrl.indexOf("&" + removeVal) !== -1) {
            url = url.replace("&" + removeVal, "");
        }
    } else {
        searchUrl = location.search;
        url = url.replace(searchUrl, "");
    }

    if (prevUrlQueryString !== url) {
        prevUrlQueryString = url;
        // This will create a new entry in the browser's history, without reloading
        window.history.pushState({ state: 1 }, '', url);
        // This will replace the current entry in the browser's history, without reloading
        window.history.replaceState({ state: 1 }, '', url);
    }
}

$(document).ready(function () {
    
    $('#search-text').keypress(function (event) {

        if (event.which === 13) {
            event.preventDefault();
            performSearch();
        }
    });

    $('#btn-search-procedure').click(performSearch);
    $('#btn-clear-search-text').click(clearSearchText);

    SetKeywords();

    $('.modal').on('hidden.bs.modal', function () {
        var $this = $(this);
        //get iframe on click
        var vidsrc_frame = $this.find("iframe");
        var vidsrc_src = vidsrc_frame.attr('src');
        console.log(`videosrc=` + vidsrc_src);
        vidsrc_frame.attr('src', '');
        vidsrc_frame.attr('src', vidsrc_src);
    });

    // handle visibility of "scroll to top" button
    const returnToTopButton = document.getElementById("returnToTop");
    function scrollFunction() {
        if (document.body.scrollTop > 150 || document.documentElement.scrollTop > 150) {
            returnToTopButton.style.display = "block";
            
        } else {
            returnToTopButton.style.display = "none";
        }
    }
    window.onscroll = function () { scrollFunction(); };

    // enable bootsrtap tooltips on all pages
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl)
    })

    
});

// Tippy's - close on Esc press
const hideOnEsc = {
    name: 'hideOnEsc',
    defaultValue: true,
    fn({ hide }) {
        function onKeyDown(event) {
            if (event.keyCode === 27) {
                hide();
            }
        }

        return {
            onShow() {
                document.addEventListener('keydown', onKeyDown);
            },
            onHide() {
                document.removeEventListener('keydown', onKeyDown);
            },
        };
    },
};

function performSearch() {

    var searchEn = 'search'; 
    var searchFr = 'recherche'; 
    var searchText = encodeURIComponent($('#search-text').val()).replace(/%20/g, "+");

    var action = currentLanguage === "en" ? searchEn : searchFr;
    if (searchText !== null && searchText != "") {

        var urlParams = getQueryParams();
        let lrValue = '';
        let ppValue = '';
        let soValue = '';
        let sdValue = '';
        let guValue = '';

        if (urlParams.has('lr')) {
            lrValue = urlParams.get('lr').toLowerCase();
        }
        if (urlParams.has('pp')) {
            ppValue = urlParams.get('pp').toLowerCase();
        }
        if (urlParams.has('so')) {
            soValue = urlParams.get('so').toLowerCase();
        }
        if (urlParams.has('sd')) {
            sdValue = urlParams.get('sd').toLowerCase();
        }
        if (urlParams.has('gu')) {
            guValue = urlParams.get('gu').toLowerCase();
        }
        let targetUrl = `/procedure/${action}?keywords=${searchText}`
        
        if (ppValue) {
            targetUrl += `&pp=${ppValue}`;
        }
        if (soValue) {
            targetUrl += `&so=${soValue}`;
        }
        if (sdValue) {
            targetUrl += `&sd=${sdValue}`;
        }
        if (lrValue) {
            targetUrl += `&lr=${lrValue}`;
        }
        if (guValue) {
            targetUrl += `&gu=${guValue}`;
        }

        window.location.href = targetUrl;
    }
}

function clearSearchText() {

    $('#search-text').val('');
    $('#search-text').focus();
}

function SetKeywords() {

    var keywords = ''
    var urlParams = new URLSearchParams(location.search);
    if (urlParams.has('keywords')) {
        keywords = urlParams.get('keywords');
    }
    $('#search-text').val(decodeURIComponent(keywords));
}


// ************************************************************
// Top of page button (Show and Hide Back to Top Button)
// ************************************************************
//$(document).scroll(function () {
//    var y = $(this).scrollTop();
//    if (y > 800) {
//        $('.backToTop').fadeIn();
//    } else {
//        $('.backToTop').fadeOut();
//    }
//});

window.addEventListener('scroll', function () {
    var y = $(this).scrollTop();
    if (y > 800) {
        $('.backToTop').fadeIn();
    } else {
        $('.backToTop').fadeOut();
    }
});


// ************************************************************
// Current Language
// ************************************************************
var currentLanguage = "en";
$(function () {
    currentLanguage = $('html').attr('lang');
});




// ************************************************************
// Performs a smooth page scroll to an anchor on the same page
// ************************************************************
$(function () {
    "use strict";
    $(".bs-docs-sidebar a[href*='#']:not([href='#'])").click(function () {
        if (location.pathname.replace(/^\//, '') === this.pathname.replace(/^\//, '') && location.hostname === this.hostname) {
            var target = $(this.hash);
            target = target.length ? target : $("[name=" + this.hash.slice(1) + "]");
            if (target.length) {
                target.focus();
                $("html, body").animate({
                    scrollTop: target.offset().top
                }, 500);
            }
        }
    });
});


function getQueryParams() {
    var params = (new URL(document.location)).searchParams
    return params;
}