"""
This type stub file was generated by pyright.
"""

import logging
from typing import Any, Optional

"""
Scrapy extension for collecting scraping stats
"""
logger = logging.getLogger(__name__)
class StatsCollector(object):
    def __init__(self, crawler):
        ...
    
    def get_value(self, key, default: Optional[Any] = ..., spider: Optional[Any] = ...):
        ...
    
    def get_stats(self, spider: Optional[Any] = ...):
        ...
    
    def set_value(self, key, value, spider: Optional[Any] = ...):
        ...
    
    def set_stats(self, stats, spider: Optional[Any] = ...):
        ...
    
    def inc_value(self, key, count=..., start=..., spider: Optional[Any] = ...):
        ...
    
    def max_value(self, key, value, spider: Optional[Any] = ...):
        ...
    
    def min_value(self, key, value, spider: Optional[Any] = ...):
        ...
    
    def clear_stats(self, spider: Optional[Any] = ...):
        ...
    
    def open_spider(self, spider):
        ...
    
    def close_spider(self, spider, reason):
        ...
    
    def _persist_stats(self, stats, spider):
        ...
    


class MemoryStatsCollector(StatsCollector):
    def __init__(self, crawler):
        self.spider_stats = ...
    
    def _persist_stats(self, stats, spider):
        ...
    


class DummyStatsCollector(StatsCollector):
    def get_value(self, key, default: Optional[Any] = ..., spider: Optional[Any] = ...):
        ...
    
    def set_value(self, key, value, spider: Optional[Any] = ...):
        ...
    
    def set_stats(self, stats, spider: Optional[Any] = ...):
        ...
    
    def inc_value(self, key, count=..., start=..., spider: Optional[Any] = ...):
        ...
    
    def max_value(self, key, value, spider: Optional[Any] = ...):
        ...
    
    def min_value(self, key, value, spider: Optional[Any] = ...):
        ...
    


