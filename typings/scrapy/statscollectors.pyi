"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, Optional, TYPE_CHECKING
from scrapy import Spider
from scrapy.crawler import Crawler

"""
Scrapy extension for collecting scraping stats
"""
if TYPE_CHECKING:
    ...
logger = ...
StatsT = Dict[str, Any]
class StatsCollector:
    def __init__(self, crawler: Crawler) -> None:
        ...
    
    def get_value(self, key: str, default: Any = ..., spider: Optional[Spider] = ...) -> Any:
        ...
    
    def get_stats(self, spider: Optional[Spider] = ...) -> StatsT:
        ...
    
    def set_value(self, key: str, value: Any, spider: Optional[Spider] = ...) -> None:
        ...
    
    def set_stats(self, stats: StatsT, spider: Optional[Spider] = ...) -> None:
        ...
    
    def inc_value(self, key: str, count: int = ..., start: int = ..., spider: Optional[Spider] = ...) -> None:
        ...
    
    def max_value(self, key: str, value: Any, spider: Optional[Spider] = ...) -> None:
        ...
    
    def min_value(self, key: str, value: Any, spider: Optional[Spider] = ...) -> None:
        ...
    
    def clear_stats(self, spider: Optional[Spider] = ...) -> None:
        ...
    
    def open_spider(self, spider: Spider) -> None:
        ...
    
    def close_spider(self, spider: Spider, reason: str) -> None:
        ...
    


class MemoryStatsCollector(StatsCollector):
    def __init__(self, crawler: Crawler) -> None:
        ...
    


class DummyStatsCollector(StatsCollector):
    def get_value(self, key: str, default: Any = ..., spider: Optional[Spider] = ...) -> Any:
        ...
    
    def set_value(self, key: str, value: Any, spider: Optional[Spider] = ...) -> None:
        ...
    
    def set_stats(self, stats: StatsT, spider: Optional[Spider] = ...) -> None:
        ...
    
    def inc_value(self, key: str, count: int = ..., start: int = ..., spider: Optional[Spider] = ...) -> None:
        ...
    
    def max_value(self, key: str, value: Any, spider: Optional[Spider] = ...) -> None:
        ...
    
    def min_value(self, key: str, value: Any, spider: Optional[Spider] = ...) -> None:
        ...
    


