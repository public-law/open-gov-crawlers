"""
This type stub file was generated by pyright.
"""

from typing import DefaultDict
from weakref import WeakKeyDictionary

"""This module provides some functions and classes to record and report
references to live object instances.

If you want live objects for a particular class to be tracked, you only have to
subclass from object_ref (instead of object).

About performance: This library has a minimal performance impact when enabled,
and no performance penalty at all when disabled (as object_ref becomes just an
alias to object in that case).
"""
NoneType = ...
live_refs: DefaultDict[type, WeakKeyDictionary] = ...
class object_ref:
    """Inherit from this class to a keep a record of live instances"""
    __slots__ = ...
    def __new__(cls, *args, **kwargs): # -> Self@object_ref:
        ...
    


def format_live_refs(ignore=...): # -> str:
    """Return a tabular representation of tracked objects"""
    ...

def print_live_refs(*a, **kw): # -> None:
    """Print tracked objects"""
    ...

def get_oldest(class_name): # -> None:
    """Get the oldest object for a specific class name"""
    ...

def iter_all(class_name): # -> Iterator[Unknown] | None:
    """Iterate over all objects of the same class by its class name"""
    ...

