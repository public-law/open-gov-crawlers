"""
This type stub file was generated by pyright.
"""

from types import CoroutineType, ModuleType
from typing import Any, AsyncGenerator, Generator, Iterable, Literal, Optional, TYPE_CHECKING, Type, TypeVar, Union, overload
from twisted.internet.defer import Deferred
from scrapy import Request
from scrapy.spiders import Spider
from scrapy.spiderloader import SpiderLoader

if TYPE_CHECKING:
    ...
logger = ...
_T = TypeVar("_T")
@overload
def iterate_spider_output(result: AsyncGenerator) -> AsyncGenerator:
    ...

@overload
def iterate_spider_output(result: CoroutineType) -> Deferred:
    ...

@overload
def iterate_spider_output(result: _T) -> Iterable:
    ...

def iterate_spider_output(result: Any) -> Union[Iterable, AsyncGenerator, Deferred]:
    ...

def iter_spider_classes(module: ModuleType) -> Generator[Type[Spider], Any, None]:
    """Return an iterator over all spider classes defined in the given module
    that can be instantiated (i.e. which have name)
    """
    ...

@overload
def spidercls_for_request(spider_loader: SpiderLoader, request: Request, default_spidercls: Type[Spider], log_none: bool = ..., log_multiple: bool = ...) -> Type[Spider]:
    ...

@overload
def spidercls_for_request(spider_loader: SpiderLoader, request: Request, default_spidercls: Literal[None], log_none: bool = ..., log_multiple: bool = ...) -> Optional[Type[Spider]]:
    ...

@overload
def spidercls_for_request(spider_loader: SpiderLoader, request: Request, *, log_none: bool = ..., log_multiple: bool = ...) -> Optional[Type[Spider]]:
    ...

def spidercls_for_request(spider_loader: SpiderLoader, request: Request, default_spidercls: Optional[Type[Spider]] = ..., log_none: bool = ..., log_multiple: bool = ...) -> Optional[Type[Spider]]:
    """Return a spider class that handles the given Request.

    This will look for the spiders that can handle the given request (using
    the spider loader) and return a Spider class if (and only if) there is
    only one Spider able to handle the Request.

    If multiple spiders (or no spider) are found, it will return the
    default_spidercls passed. It can optionally log if multiple or no spiders
    are found.
    """
    ...

class DefaultSpider(Spider):
    name = ...


