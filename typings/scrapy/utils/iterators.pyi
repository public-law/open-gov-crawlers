"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, Generator, List, Optional, TYPE_CHECKING, Union
from scrapy.http import Response
from scrapy.selector import Selector

if TYPE_CHECKING:
    ...
logger = ...
def xmliter(obj: Union[Response, str, bytes], nodename: str) -> Generator[Selector, Any, None]:
    """Return a iterator of Selector's over all nodes of a XML document,
       given the name of the node to iterate. Useful for parsing XML feeds.

    obj can be:
    - a Response object
    - a unicode string
    - a string encoded as utf-8
    """
    ...

def xmliter_lxml(obj: Union[Response, str, bytes], nodename: str, namespace: Optional[str] = ..., prefix: str = ...) -> Generator[Selector, Any, None]:
    ...

class _StreamReader:
    def __init__(self, obj: Union[Response, str, bytes]) -> None:
        ...
    
    def read(self, n: int = ...) -> bytes:
        ...
    


def csviter(obj: Union[Response, str, bytes], delimiter: Optional[str] = ..., headers: Optional[List[str]] = ..., encoding: Optional[str] = ..., quotechar: Optional[str] = ...) -> Generator[Dict[str, str], Any, None]:
    """Returns an iterator of dictionaries from the given csv object

    obj can be:
    - a Response object
    - a unicode string
    - a string encoded as utf-8

    delimiter is the character used to separate fields on the given obj.

    headers is an iterable that when provided offers the keys
    for the returned dictionaries, if not the first row is used.

    quotechar is the character used to enclosure fields on the given obj.
    """
    ...

