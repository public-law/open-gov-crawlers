"""
This type stub file was generated by pyright.
"""

import os
from configparser import ConfigParser
from typing import Any, Callable, Dict, List, MutableMapping, Optional, Union
from scrapy.settings import BaseSettings

def build_component_list(compdict: MutableMapping[Any, Any], custom: Any = ..., convert: Callable[[Any], Any] = ...) -> List[Any]:
    """Compose a component list from a { class: order } dictionary."""
    ...

def arglist_to_dict(arglist: List[str]) -> Dict[str, str]:
    """Convert a list of arguments like ['arg1=val1', 'arg2=val2', ...] to a
    dict
    """
    ...

def closest_scrapy_cfg(path: Union[str, os.PathLike] = ..., prevpath: Optional[Union[str, os.PathLike]] = ...) -> str:
    """Return the path to the closest scrapy.cfg file by traversing the current
    directory and its parents
    """
    ...

def init_env(project: str = ..., set_syspath: bool = ...) -> None:
    """Initialize environment to use command-line tool from inside a project
    dir. This sets the Scrapy settings module and modifies the Python path to
    be able to locate the project module.
    """
    ...

def get_config(use_closest: bool = ...) -> ConfigParser:
    """Get Scrapy config file as a ConfigParser"""
    ...

def get_sources(use_closest: bool = ...) -> List[str]:
    ...

def feed_complete_default_values_from_settings(feed: Dict[str, Any], settings: BaseSettings) -> Dict[str, Any]:
    ...

def feed_process_params_from_cli(settings: BaseSettings, output: List[str], output_format: Optional[str] = ..., overwrite_output: Optional[List[str]] = ...) -> Dict[str, Dict[str, Any]]:
    """
    Receives feed export params (from the 'crawl' or 'runspider' commands),
    checks for inconsistencies in their quantities and returns a dictionary
    suitable to be used as the FEEDS setting.
    """
    ...

