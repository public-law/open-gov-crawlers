"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Generator, Iterable, TYPE_CHECKING
from twisted.internet.defer import Deferred, inlineCallbacks
from scrapy.http import Request
from scrapy.spiders import Spider
from scrapy.utils.reactor import CallLaterOnce
from scrapy.core.scheduler import BaseScheduler
from scrapy.crawler import Crawler

"""
This is the Scrapy engine which controls the Scheduler, Downloader and Spider.

For more information see docs/topics/architecture.rst

"""
if TYPE_CHECKING:
    ...
logger = ...
class Slot:
    def __init__(self, start_requests: Iterable[Request], close_if_idle: bool, nextcall: CallLaterOnce, scheduler: BaseScheduler) -> None:
        ...
    
    def add_request(self, request: Request) -> None:
        ...
    
    def remove_request(self, request: Request) -> None:
        ...
    
    def close(self) -> Deferred:
        ...
    


class ExecutionEngine:
    def __init__(self, crawler: Crawler, spider_closed_callback: Callable) -> None:
        ...
    
    @inlineCallbacks
    def start(self) -> Generator[Deferred, Any, None]:
        ...
    
    def stop(self) -> Deferred:
        """Gracefully stop the execution engine"""
        ...
    
    def close(self) -> Deferred:
        """
        Gracefully close the execution engine.
        If it has already been started, stop it. In all cases, close the spider and the downloader.
        """
        ...
    
    def pause(self) -> None:
        ...
    
    def unpause(self) -> None:
        ...
    
    def spider_is_idle(self) -> bool:
        ...
    
    def crawl(self, request: Request) -> None:
        """Inject the request into the spider <-> downloader pipeline"""
        ...
    
    def download(self, request: Request) -> Deferred:
        """Return a Deferred which fires with a Response as result, only downloader middlewares are applied"""
        ...
    
    @inlineCallbacks
    def open_spider(self, spider: Spider, start_requests: Iterable = ..., close_if_idle: bool = ...) -> Generator[Deferred, Any, None]:
        ...
    
    def close_spider(self, spider: Spider, reason: str = ...) -> Deferred:
        """Close (cancel) spider and clear all its outstanding requests"""
        ...
    


