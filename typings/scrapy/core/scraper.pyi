"""
This type stub file was generated by pyright.
"""

from typing import Any, AsyncIterable, Generator, Iterable, TYPE_CHECKING, Tuple, Union
from twisted.internet.defer import Deferred, inlineCallbacks
from twisted.python.failure import Failure
from scrapy import Spider
from scrapy.http import Request, Response
from scrapy.crawler import Crawler

"""This module implements the Scraper component which parses responses and
extracts information from them"""
if TYPE_CHECKING:
    ...
QueueTuple = Tuple[Union[Response, Failure], Request, Deferred]
logger = ...
class Slot:
    """Scraper slot (one per running spider)"""
    MIN_RESPONSE_SIZE = ...
    def __init__(self, max_active_size: int = ...) -> None:
        ...
    
    def add_response_request(self, result: Union[Response, Failure], request: Request) -> Deferred:
        ...
    
    def next_response_request_deferred(self) -> QueueTuple:
        ...
    
    def finish_response(self, result: Union[Response, Failure], request: Request) -> None:
        ...
    
    def is_idle(self) -> bool:
        ...
    
    def needs_backout(self) -> bool:
        ...
    


class Scraper:
    def __init__(self, crawler: Crawler) -> None:
        ...
    
    @inlineCallbacks
    def open_spider(self, spider: Spider) -> Generator[Deferred, Any, None]:
        """Open the given spider for scraping and allocate resources for it"""
        ...
    
    def close_spider(self, spider: Spider) -> Deferred:
        """Close a spider being scraped and release its resources"""
        ...
    
    def is_idle(self) -> bool:
        """Return True if there isn't any more spiders to process"""
        ...
    
    def enqueue_scrape(self, result: Union[Response, Failure], request: Request, spider: Spider) -> Deferred:
        ...
    
    def call_spider(self, result: Union[Response, Failure], request: Request, spider: Spider) -> Deferred:
        ...
    
    def handle_spider_error(self, _failure: Failure, request: Request, response: Union[Response, Failure], spider: Spider) -> None:
        ...
    
    def handle_spider_output(self, result: Union[Iterable, AsyncIterable], request: Request, response: Union[Response, Failure], spider: Spider) -> Deferred:
        ...
    


