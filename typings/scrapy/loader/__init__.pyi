"""
This type stub file was generated by pyright.
"""

import six
from collections import defaultdict
from scrapy.item import Item
from scrapy.loader.common import wrap_loader_context
from scrapy.loader.processors import Identity
from scrapy.selector import Selector
from scrapy.utils.misc import arg_to_iter, extract_regex
from scrapy.utils.python import flatten
from typing import Any, Optional

"""
Item Loader

See documentation in docs/topics/loaders.rst
"""
class ItemLoader(object):
    default_item_class = ...
    default_input_processor = ...
    default_output_processor = ...
    default_selector_class = ...
    def __init__(self, item: Optional[Any] = ..., selector: Optional[Any] = ..., response: Optional[Any] = ..., parent: Optional[Any] = ..., **context):
        self.selector = ...
        self.context = ...
        self.parent = ...
    
    @property
    def _values(self):
        ...
    
    @property
    def item(self):
        ...
    
    def nested_xpath(self, xpath, **context):
        ...
    
    def nested_css(self, css, **context):
        ...
    
    def add_value(self, field_name, value, *processors, **kw):
        ...
    
    def replace_value(self, field_name, value, *processors, **kw):
        ...
    
    def _add_value(self, field_name, value):
        ...
    
    def _replace_value(self, field_name, value):
        ...
    
    def get_value(self, value, *processors, **kw):
        ...
    
    def load_item(self):
        ...
    
    def get_output_value(self, field_name):
        ...
    
    def get_collected_values(self, field_name):
        ...
    
    def get_input_processor(self, field_name):
        ...
    
    def get_output_processor(self, field_name):
        ...
    
    def _process_input_value(self, field_name, value):
        ...
    
    def _get_item_field_attr(self, field_name, key, default: Optional[Any] = ...):
        ...
    
    def _check_selector_method(self):
        ...
    
    def add_xpath(self, field_name, xpath, *processors, **kw):
        ...
    
    def replace_xpath(self, field_name, xpath, *processors, **kw):
        ...
    
    def get_xpath(self, xpath, *processors, **kw):
        ...
    
    def _get_xpathvalues(self, xpaths, **kw):
        ...
    
    def add_css(self, field_name, css, *processors, **kw):
        ...
    
    def replace_css(self, field_name, css, *processors, **kw):
        ...
    
    def get_css(self, css, *processors, **kw):
        ...
    
    def _get_cssvalues(self, csss, **kw):
        ...
    


