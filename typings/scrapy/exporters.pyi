"""
This type stub file was generated by pyright.
"""

"""
Item Exporters are used to export/serialize items into different formats.
"""
__all__ = ["BaseItemExporter", "PprintItemExporter", "PickleItemExporter", "CsvItemExporter", "XmlItemExporter", "JsonLinesItemExporter", "JsonItemExporter", "MarshalItemExporter"]
class BaseItemExporter:
    def __init__(self, *, dont_fail=..., **kwargs) -> None:
        ...
    
    def export_item(self, item):
        ...
    
    def serialize_field(self, field, name, value):
        ...
    
    def start_exporting(self): # -> None:
        ...
    
    def finish_exporting(self): # -> None:
        ...
    


class JsonLinesItemExporter(BaseItemExporter):
    def __init__(self, file, **kwargs) -> None:
        ...
    
    def export_item(self, item): # -> None:
        ...
    


class JsonItemExporter(BaseItemExporter):
    def __init__(self, file, **kwargs) -> None:
        ...
    
    def start_exporting(self): # -> None:
        ...
    
    def finish_exporting(self): # -> None:
        ...
    
    def export_item(self, item): # -> None:
        ...
    


class XmlItemExporter(BaseItemExporter):
    def __init__(self, file, **kwargs) -> None:
        ...
    
    def start_exporting(self): # -> None:
        ...
    
    def export_item(self, item): # -> None:
        ...
    
    def finish_exporting(self): # -> None:
        ...
    


class CsvItemExporter(BaseItemExporter):
    def __init__(self, file, include_headers_line=..., join_multivalued=..., errors=..., **kwargs) -> None:
        ...
    
    def serialize_field(self, field, name, value):
        ...
    
    def export_item(self, item): # -> None:
        ...
    
    def finish_exporting(self): # -> None:
        ...
    


class PickleItemExporter(BaseItemExporter):
    def __init__(self, file, protocol=..., **kwargs) -> None:
        ...
    
    def export_item(self, item): # -> None:
        ...
    


class MarshalItemExporter(BaseItemExporter):
    """Exports items in a Python-specific binary format (see
    :mod:`marshal`).

    :param file: The file-like object to use for exporting the data. Its
                 ``write`` method should accept :class:`bytes` (a disk file
                 opened in binary mode, a :class:`~io.BytesIO` object, etc)
    """
    def __init__(self, file, **kwargs) -> None:
        ...
    
    def export_item(self, item): # -> None:
        ...
    


class PprintItemExporter(BaseItemExporter):
    def __init__(self, file, **kwargs) -> None:
        ...
    
    def export_item(self, item): # -> None:
        ...
    


class PythonItemExporter(BaseItemExporter):
    """This is a base class for item exporters that extends
    :class:`BaseItemExporter` with support for nested items.

    It serializes items to built-in Python types, so that any serialization
    library (e.g. :mod:`json` or msgpack_) can be used on top of it.

    .. _msgpack: https://pypi.org/project/msgpack/
    """
    def serialize_field(self, field, name, value):
        ...
    
    def export_item(self, item): # -> dict[str | Any, Any | None]:
        ...
    


