"""
This type stub file was generated by pyright.
"""

import sys
from typing import Any, Optional

"""
Item Exporters are used to export/serialize items into different formats.
"""
__all__ = ['BaseItemExporter', 'PprintItemExporter', 'PickleItemExporter', 'CsvItemExporter', 'XmlItemExporter', 'JsonLinesItemExporter', 'JsonItemExporter', 'MarshalItemExporter']
class BaseItemExporter(object):
    def __init__(self, **kwargs):
        ...
    
    def _configure(self, options, dont_fail: bool = ...):
        """Configure the exporter by poping options from the ``options`` dict.
        If dont_fail is set, it won't raise an exception on unexpected options
        (useful for using with keyword arguments in subclasses constructors)
        """
        self.encoding = ...
        self.fields_to_export = ...
        self.export_empty_fields = ...
        self.indent = ...
    
    def export_item(self, item):
        ...
    
    def serialize_field(self, field, name, value):
        ...
    
    def start_exporting(self):
        ...
    
    def finish_exporting(self):
        ...
    
    def _get_serialized_fields(self, item, default_value: Optional[Any] = ..., include_empty: Optional[Any] = ...):
        """Return the fields to export as an iterable of tuples
        (name, serialized_value)
        """
        ...
    


class JsonLinesItemExporter(BaseItemExporter):
    def __init__(self, file, **kwargs):
        self.file = ...
        self.encoder = ...
    
    def export_item(self, item):
        ...
    


class JsonItemExporter(BaseItemExporter):
    def __init__(self, file, **kwargs):
        self.file = ...
        self.encoder = ...
        self.first_item = ...
    
    def _beautify_newline(self):
        ...
    
    def start_exporting(self):
        ...
    
    def finish_exporting(self):
        ...
    
    def export_item(self, item):
        ...
    


class XmlItemExporter(BaseItemExporter):
    def __init__(self, file, **kwargs):
        self.item_element = ...
        self.root_element = ...
        self.xg = ...
    
    def _beautify_newline(self, new_item: bool = ...):
        ...
    
    def _beautify_indent(self, depth=...):
        ...
    
    def start_exporting(self):
        ...
    
    def export_item(self, item):
        ...
    
    def finish_exporting(self):
        ...
    
    def _export_xml_field(self, name, serialized_value, depth):
        ...
    
    if sys.version_info[: 3] >= (2, 7, 4):
        def _xg_characters(self, serialized_value):
            ...
        
    else:
        def _xg_characters(self, serialized_value):
            ...
        


class CsvItemExporter(BaseItemExporter):
    def __init__(self, file, include_headers_line: bool = ..., join_multivalued=..., **kwargs):
        self.include_headers_line = ...
        self.stream = ...
        self.csv_writer = ...
    
    def serialize_field(self, field, name, value):
        ...
    
    def _join_if_needed(self, value):
        ...
    
    def export_item(self, item):
        ...
    
    def _build_row(self, values):
        ...
    
    def _write_headers_and_set_fields_to_export(self, item):
        ...
    


class PickleItemExporter(BaseItemExporter):
    def __init__(self, file, protocol=..., **kwargs):
        self.file = ...
        self.protocol = ...
    
    def export_item(self, item):
        ...
    


class MarshalItemExporter(BaseItemExporter):
    """Exports items in a Python-specific binary format (see
    :mod:`marshal`).

    :param file: The file-like object to use for exporting the data. Its
                 ``write`` method should accept :class:`bytes` (a disk file
                 opened in binary mode, a :class:`~io.BytesIO` object, etc)
    """
    def __init__(self, file, **kwargs):
        self.file = ...
    
    def export_item(self, item):
        ...
    


class PprintItemExporter(BaseItemExporter):
    def __init__(self, file, **kwargs):
        self.file = ...
    
    def export_item(self, item):
        ...
    


class PythonItemExporter(BaseItemExporter):
    """This is a base class for item exporters that extends
    :class:`BaseItemExporter` with support for nested items.

    It serializes items to built-in Python types, so that any serialization
    library (e.g. :mod:`json` or msgpack_) can be used on top of it.

    .. _msgpack: https://pypi.org/project/msgpack/
    """
    def _configure(self, options, dont_fail: bool = ...):
        self.binary = ...
    
    def serialize_field(self, field, name, value):
        ...
    
    def _serialize_value(self, value):
        ...
    
    def _serialize_dict(self, value):
        ...
    
    def export_item(self, item):
        ...
    


