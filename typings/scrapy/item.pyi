"""
This type stub file was generated by pyright.
"""

from abc import ABCMeta
from collections.abc import MutableMapping
from typing import Dict
from scrapy.utils.trackref import object_ref

"""
Scrapy Item

See documentation in docs/topics/item.rst
"""
class Field(dict):
    """Container of field metadata"""
    ...


class ItemMeta(ABCMeta):
    """Metaclass_ of :class:`Item` that handles field definitions.

    .. _metaclass: https://realpython.com/python-metaclasses
    """
    def __new__(mcs, class_name, bases, attrs): # -> Self:
        ...
    


class Item(MutableMapping, object_ref, metaclass=ItemMeta):
    """
    Base class for scraped items.

    In Scrapy, an object is considered an ``item`` if it is an instance of either
    :class:`Item` or :class:`dict`, or any subclass. For example, when the output of a
    spider callback is evaluated, only instances of :class:`Item` or
    :class:`dict` are passed to :ref:`item pipelines <topics-item-pipeline>`.

    If you need instances of a custom class to be considered items by Scrapy,
    you must inherit from either :class:`Item` or :class:`dict`.

    Items must declare :class:`Field` attributes, which are processed and stored
    in the ``fields`` attribute. This restricts the set of allowed field names
    and prevents typos, raising ``KeyError`` when referring to undefined fields.
    Additionally, fields can be used to define metadata and control the way
    data is processed internally. Please refer to the :ref:`documentation
    about fields <topics-items-fields>` for additional information.

    Unlike instances of :class:`dict`, instances of :class:`Item` may be
    :ref:`tracked <topics-leaks-trackrefs>` to debug memory leaks.
    """
    fields: Dict[str, Field]
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def __getitem__(self, key):
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __delitem__(self, key): # -> None:
        ...
    
    def __getattr__(self, name):
        ...
    
    def __setattr__(self, name, value): # -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __iter__(self): # -> Iterator[Any]:
        ...
    
    __hash__ = ...
    def keys(self): # -> dict_keys[Any, Any]:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def copy(self): # -> Self:
        ...
    
    def deepcopy(self): # -> Self:
        """Return a :func:`~copy.deepcopy` of this item."""
        ...
    


