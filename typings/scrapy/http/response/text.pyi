"""
This type stub file was generated by pyright.
"""

from scrapy.http.response import Response
from scrapy.selector.unified import SelectorList
from scrapy.utils.python import memoizemethod_noargs
from typing import Any, Optional

"""
This module implements the TextResponse class which adds encoding handling and
discovering (through HTTP headers) to base Response class.

See documentation in docs/topics/request-response.rst
"""


class TextResponse(Response):
    _DEFAULT_ENCODING = ...

    def __init__(self, *args, **kwargs):
        ...

    def _set_url(self, url):
        ...

    def _set_body(self, body):
        ...

    def replace(self, *args, **kwargs):
        ...

    @property
    def encoding(self):
        ...

    def _declared_encoding(self):
        ...

    def body_as_unicode(self):
        """Return body as unicode"""
        ...

    @property
    def text(self):
        """ Body as unicode """
        ...

    def urljoin(self, url):
        """Join this Response's url with a possible relative url to form an
        absolute interpretation of the latter."""
        ...

    @memoizemethod_noargs
    def _headers_encoding(self):
        ...

    def _body_inferred_encoding(self):
        ...

    def _auto_detect_fun(self, text):
        ...

    @memoizemethod_noargs
    def _body_declared_encoding(self):
        ...

    @property
    def selector(self):
        ...

    def xpath(self, query: str, **kwargs) -> SelectorList:
        ...

    def css(self, query: str) -> SelectorList:
        ...

    def follow(
        self,
        url,
        callback: Optional[Any] = ...,
        method=...,
        headers: Optional[Any] = ...,
        body: Optional[Any] = ...,
        cookies: Optional[Any] = ...,
        meta: Optional[Any] = ...,
        encoding: Optional[Any] = ...,
        priority=...,
        dont_filter: bool = ...,
        errback: Optional[Any] = ...,
        cb_kwargs: Optional[Any] = ...,
    ):
        """
        Return a :class:`~.Request` instance to follow a link ``url``.
        It accepts the same arguments as ``Request.__init__`` method,
        but ``url`` can be not only an absolute URL, but also

        * a relative URL;
        * a scrapy.link.Link object (e.g. a link extractor result);
        * an attribute Selector (not SelectorList) - e.g.
          ``response.css('a::attr(href)')[0]`` or
          ``response.xpath('//img/@src')[0]``.
        * a Selector for ``<a>`` or ``<link>`` element, e.g.
          ``response.css('a.my_link')[0]``.

        See :ref:`response-follow-example` for usage examples.
        """
        ...


def _url_from_selector(sel):
    ...
