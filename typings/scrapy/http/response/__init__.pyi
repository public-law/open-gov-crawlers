"""
This type stub file was generated by pyright.
"""

from six.moves.urllib.parse import urljoin
from scrapy.http.request import Request
from scrapy.http.headers import Headers
from scrapy.link import Link
from scrapy.utils.trackref import object_ref
from scrapy.http.common import obsolete_setter
from scrapy.exceptions import NotSupported
from typing import Any, Optional

"""
This module implements the Response class which is used to represent HTTP
responses in Scrapy.

See documentation in docs/topics/request-response.rst
"""
class Response(object_ref):
    def __init__(self, url, status=..., headers: Optional[Any] = ..., body=..., flags: Optional[Any] = ..., request: Optional[Any] = ...):
        self.headers = ...
        self.status = ...
        self.request = ...
        self.flags = ...
    
    @property
    def meta(self):
        ...
    
    def _get_url(self):
        ...
    
    def _set_url(self, url):
        ...
    
    url = ...
    def _get_body(self):
        ...
    
    def _set_body(self, body):
        ...
    
    body = ...
    def __str__(self):
        ...
    
    __repr__ = ...
    def copy(self):
        """Return a copy of this Response"""
        ...
    
    def replace(self, *args, **kwargs):
        """Create a new Response with the same attributes except for those
        given new values.
        """
        ...
    
    def urljoin(self, url):
        """Join this Response's url with a possible relative url to form an
        absolute interpretation of the latter."""
        ...
    
    @property
    def text(self):
        """For subclasses of TextResponse, this will return the body
        as text (unicode object in Python 2 and str in Python 3)
        """
        ...
    
    def css(self, *a, **kw):
        """Shortcut method implemented only by responses whose content
        is text (subclasses of TextResponse).
        """
        ...
    
    def xpath(self, *a, **kw):
        """Shortcut method implemented only by responses whose content
        is text (subclasses of TextResponse).
        """
        ...
    
    def follow(self, url, callback: Optional[Any] = ..., method=..., headers: Optional[Any] = ..., body: Optional[Any] = ..., cookies: Optional[Any] = ..., meta: Optional[Any] = ..., encoding=..., priority=..., dont_filter: bool = ..., errback: Optional[Any] = ..., cb_kwargs: Optional[Any] = ...):
        """
        Return a :class:`~.Request` instance to follow a link ``url``.
        It accepts the same arguments as ``Request.__init__`` method,
        but ``url`` can be a relative URL or a ``scrapy.link.Link`` object,
        not only an absolute URL.
        
        :class:`~.TextResponse` provides a :meth:`~.TextResponse.follow` 
        method which supports selectors in addition to absolute/relative URLs
        and Link objects.
        """
        ...
    


