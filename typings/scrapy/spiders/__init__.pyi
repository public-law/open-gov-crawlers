"""
This type stub file was generated by pyright.
"""

import logging
from __future__ import annotations
from typing import Any, Iterable, List, Optional, TYPE_CHECKING, Union, cast
from twisted.internet.defer import Deferred
from scrapy import signals
from scrapy.http import Request, Response
from scrapy.utils.trackref import object_ref
from scrapy.utils.url import url_is_from_spider
from typing_extensions import Self
from scrapy.crawler import Crawler
from scrapy.settings import BaseSettings
from scrapy.spiders.crawl import CrawlSpider, Rule
from scrapy.spiders.feed import CSVFeedSpider, XMLFeedSpider
from scrapy.spiders.sitemap import SitemapSpider

"""
Base class for Scrapy spiders

See documentation in docs/topics/spiders.rst
"""
if TYPE_CHECKING:
    ...
class Spider(object_ref):
    """Base class for scrapy spiders. All spiders must inherit from this
    class.
    """
    name: str
    custom_settings: Optional[dict] = ...
    def __init__(self, name: Optional[str] = ..., **kwargs: Any) -> None:
        ...
    
    @property
    def logger(self) -> logging.LoggerAdapter:
        ...
    
    def log(self, message: Any, level: int = ..., **kw: Any) -> None:
        """Log the given message at the given log level

        This helper wraps a log call to the logger within the spider, but you
        can use it directly (e.g. Spider.logger.info('msg')) or use any other
        Python logger too.
        """
        ...
    
    @classmethod
    def from_crawler(cls, crawler: Crawler, *args: Any, **kwargs: Any) -> Self:
        ...
    
    def start_requests(self) -> Iterable[Request]:
        ...
    
    def parse(self, response: Response, **kwargs: Any) -> Any:
        ...
    
    @classmethod
    def update_settings(cls, settings: BaseSettings) -> None:
        ...
    
    @classmethod
    def handles_request(cls, request: Request) -> bool:
        ...
    
    @staticmethod
    def close(spider: Spider, reason: str) -> Union[Deferred, None]:
        ...
    
    def __repr__(self) -> str:
        ...
    


