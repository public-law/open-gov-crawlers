"""
This type stub file was generated by pyright.
"""

from typing import Any
from twisted.internet.base import ThreadedResolver
from twisted.internet.interfaces import IHostResolution, IHostnameResolver, IResolutionReceiver, IResolverSimple
from zope.interface.declarations import implementer, provider
from scrapy.utils.datatypes import LocalCache

dnscache: LocalCache[str, Any] = ...
@implementer(IResolverSimple)
class CachingThreadedResolver(ThreadedResolver):
    """
    Default caching resolver. IPv4 only, supports setting a timeout value for DNS requests.
    """
    def __init__(self, reactor, cache_size, timeout) -> None:
        ...
    
    @classmethod
    def from_crawler(cls, crawler, reactor): # -> Self:
        ...
    
    def install_on_reactor(self): # -> None:
        ...
    
    def getHostByName(self, name: str, timeout=...): # -> Deferred[Any] | Deferred[str]:
        ...
    


@implementer(IHostResolution)
class HostResolution:
    def __init__(self, name) -> None:
        ...
    
    def cancel(self):
        ...
    


@provider(IResolutionReceiver)
class _CachingResolutionReceiver:
    def __init__(self, resolutionReceiver, hostName) -> None:
        ...
    
    def resolutionBegan(self, resolution): # -> None:
        ...
    
    def addressResolved(self, address): # -> None:
        ...
    
    def resolutionComplete(self): # -> None:
        ...
    


@implementer(IHostnameResolver)
class CachingHostnameResolver:
    """
    Experimental caching resolver. Resolves IPv4 and IPv6 addresses,
    does not support setting a timeout value for DNS requests.
    """
    def __init__(self, reactor, cache_size) -> None:
        ...
    
    @classmethod
    def from_crawler(cls, crawler, reactor): # -> Self:
        ...
    
    def install_on_reactor(self): # -> None:
        ...
    
    def resolveHostName(self, resolutionReceiver, hostName: str, portNumber=..., addressTypes=..., transportSemantics=...):
        ...
    


