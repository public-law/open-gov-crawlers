"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

"""Scrapy Shell

See documentation in docs/topics/shell.rst

"""
class Shell(object):
    relevant_classes = ...
    def __init__(self, crawler, update_vars: Optional[Any] = ..., code: Optional[Any] = ...):
        self.crawler = ...
        self.update_vars = ...
        self.item_class = ...
        self.spider = ...
        self.inthread = ...
        self.code = ...
        self.vars = ...
    
    def start(self, url: Optional[Any] = ..., request: Optional[Any] = ..., response: Optional[Any] = ..., spider: Optional[Any] = ..., redirect: bool = ...):
        ...
    
    def _schedule(self, request, spider):
        ...
    
    def _open_spider(self, request, spider):
        self.spider = ...
    
    def fetch(self, request_or_url, spider: Optional[Any] = ..., redirect: bool = ..., **kwargs):
        ...
    
    def populate_vars(self, response: Optional[Any] = ..., request: Optional[Any] = ..., spider: Optional[Any] = ...):
        ...
    
    def print_help(self):
        ...
    
    def get_help(self):
        ...
    
    def _is_relevant(self, value):
        ...
    


def inspect_response(response, spider):
    """Open a shell to inspect the given response"""
    ...

def _request_deferred(request):
    """Wrap a request inside a Deferred.

    This function is harmful, do not use it until you know what you are doing.

    This returns a Deferred whose first pair of callbacks are the request
    callback and errback. The Deferred also triggers when the request
    callback/errback is executed (ie. when the request is downloaded)

    WARNING: Do not call request.replace() until after the deferred is called.
    """
    ...

class _SelectorProxy(object):
    def __init__(self, response):
        ...
    
    def __getattr__(self, name):
        ...
    


