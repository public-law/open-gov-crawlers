"""
This type stub file was generated by pyright.
"""

import argparse
import logging
import os
import string
import sys

import regex

"""
Original Perl version by: John Gruber http://daringfireball.net/ 10 May 2008
Python version by Stuart Colville http://muffinresearch.co.uk
License: http://www.opensource.org/licenses/mit-license.php
"""
logger = ...
__all__ = ['titlecase']
__version__ = ...
SMALL = ...
PUNCT = ...
SMALL_WORDS = ...
SMALL_FIRST = ...
SMALL_LAST = ...
SUBPHRASE = ...
MAC_MC = ...
MR_MRS_MS_DR = ...
if REGEX_AVAILABLE:
    INLINE_PERIOD = ...
    UC_ELSEWHERE = ...
    CAPFIRST = ...
    APOS_SECOND = ...
    UC_INITIALS = ...
else:
    INLINE_PERIOD = ...
    UC_ELSEWHERE = ...
    CAPFIRST = ...
    APOS_SECOND = ...
    UC_INITIALS = ...
class Immutable:
    ...


class ImmutableString(str, Immutable):
    ...


class ImmutableBytes(bytes, Immutable):
    ...


def set_small_word_list(small=...): # -> None:
    ...

def titlecase(text: str) -> str: # -> LiteralString:
    """
    :param text: Titlecases input text
    :param callback: Callback function that returns the titlecase version of a specific word
    :param small_first_last: Capitalize small words (e.g. 'A') at the beginning; disabled when recursing
    :type text: str
    :type callback: function
    :type small_first_last: bool

    This filter changes all words to Title Caps, and attempts to be clever
    about *un*capitalizing SMALL words like a/an/the in the input.

    The list of "SMALL words" which are not capped comes from
    the New York Times Manual of Style, plus 'vs' and 'v'.

    """
    ...

def create_wordlist_filter_from_file(file_path): # -> ((word: Unknown, **kwargs: Unknown) -> None) | ((word: Unknown, **kwargs: Unknown) -> (str | None)):
    '''
    Load a list of abbreviations from the file with the provided path,
    reading one abbreviation from each line, and return a callback to
    be passed to the `titlecase` function for preserving their given
    canonical capitalization during title-casing.
    '''
    ...

def cmd(): # -> None:
    '''Handler for command line invocation'''
    ...
