"""
This type stub file was generated by pyright.
"""

import sys

'''
Tika Python module provides Pyt'''
USAGE = ...
if sys.version_info[0] < 3:
    ...
log_path = ...
log_file = ...
logFormatter = ...
log = ...
fileHandler = ...
consoleHandler = ...
Windows = ...
TikaVersion = ...
TikaJarPath = ...
TikaFilesPath = ...
TikaServerLogFilePath = ...
TikaServerJar = ...
ServerHost = ...
Port = ...
ServerEndpoint = ...
Translator = ...
TikaClientOnly = ...
TikaServerClasspath = ...
TikaStartupSleep = ...
TikaStartupMaxRetry = ...
TikaJava = ...
TikaJavaArgs = ...
Verbose = ...
EncodeUtf8 = ...
csvOutput = ...
TikaServerProcess = ...
class TikaException(Exception):
    ...


def echo2(*s): # -> None:
    ...

def warn(*s): # -> None:
    ...

def die(*s):
    ...

def runCommand(cmd, option, urlOrPaths, port, outDir=..., serverHost=..., tikaServerJar=..., verbose=..., encode=...):
    '''
    Run the Tika command by cal'''
    ...

def getPaths(urlOrPaths): # -> list[Unknown]:
    '''
    Determines if the given URL'''
    ...

def parseAndSave(option, urlOrPaths, outDir=..., serverEndpoint=..., verbose=..., tikaServerJar=..., responseMimeType=..., metaExtension=..., services=...): # -> list[Unknown]:
    '''
    Parse the objects and write'''
    ...

def parse(option, urlOrPaths, serverEndpoint=..., verbose=..., tikaServerJar=..., responseMimeType=..., services=..., rawResponse=...): # -> list[tuple[Unknown, Unknown]]:
    '''
    Parse the objects and retur'''
    ...

def parse1(option, urlOrPath, serverEndpoint=..., verbose=..., tikaServerJar=..., responseMimeType=..., services=..., rawResponse=..., headers=..., config_path=..., requestOptions=...): # -> tuple[Unknown, Unknown]:
    '''
    Parse the object and return'''
    ...

def detectLang(option, urlOrPaths, serverEndpoint=..., verbose=..., tikaServerJar=..., responseMimeType=..., services=...): # -> list[tuple[Unknown, Unknown]]:
    '''
    Detect the language of the '''
    ...

def detectLang1(option, urlOrPath, serverEndpoint=..., verbose=..., tikaServerJar=..., responseMimeType=..., services=..., requestOptions=...): # -> tuple[Unknown, Unknown]:
    '''
    Detect the language of the '''
    ...

def doTranslate(option, urlOrPaths, serverEndpoint=..., verbose=..., tikaServerJar=..., responseMimeType=..., services=...): # -> list[tuple[Unknown, Unknown]]:
    '''
    Translate the file from sou'''
    ...

def doTranslate1(option, urlOrPath, serverEndpoint=..., verbose=..., tikaServerJar=..., responseMimeType=..., services=..., requestOptions=...): # -> tuple[Unknown, Unknown]:
    '''

    :param option:
    :param '''
    ...

def detectType(option, urlOrPaths, serverEndpoint=..., verbose=..., tikaServerJar=..., responseMimeType=..., services=...): # -> list[tuple[Unknown, Unknown]]:
    '''
    Detect the MIME/media type '''
    ...

def detectType1(option, urlOrPath, serverEndpoint=..., verbose=..., tikaServerJar=..., responseMimeType=..., services=..., config_path=..., requestOptions=...): # -> tuple[Unknown, Unknown]:
    '''
    Detect the MIME/media type '''
    ...

def getConfig(option, serverEndpoint=..., verbose=..., tikaServerJar=..., responseMimeType=..., services=..., requestOptions=...): # -> tuple[Unknown, Unknown]:
    '''
    Get the configuration of th'''
    ...

def callServer(verb, serverEndpoint, service, data, headers, verbose=..., tikaServerJar=..., httpVerbs=..., classpath=..., rawResponse=..., config_path=..., requestOptions=...):
    '''
    Call the Tika Server, do so'''
    ...

def checkTikaServer(scheme=..., serverHost=..., port=..., tikaServerJar=..., classpath=..., config_path=...):
    '''
    Check that tika-server is r'''
    ...

def checkJarSig(tikaServerJar, jarPath): # -> bool:
    '''
    Checks the signature of Jar'''
    ...

def startServer(tikaServerJar, java_path=..., java_args=..., serverHost=..., port=..., classpath=..., config_path=...):
    '''
    Starts Tika Server
    :par'''
    ...

def killServer(): # -> None:
    '''
    Kills the tika server start'''
    ...

def toFilename(url): # -> str:
    '''
    gets url and returns filena'''
    ...

def getRemoteFile(urlOrPath, destPath):
    '''
    Fetches URL to local path o'''
    ...

def getRemoteJar(urlOrPath, destPath): # -> tuple[Unknown, Literal['local']] | tuple[Unknown, Literal['remote']]:
    '''
    Fetches URL to local path o'''
    ...

def checkPortIsOpen(remoteServerHost=..., port=...):
    '''
    Checks if the specified por'''
    ...

def main(argv=...):
    """Run Tika from command line accor"""
    ...

if __name__ == '__main__':
    resp = ...
