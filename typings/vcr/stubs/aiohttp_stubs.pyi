"""
This type stub file was generated by pyright.
"""

import asyncio
from aiohttp import ClientResponse, streams

"""Stubs for aiohttp HTTP clients"""
log = ...
class MockStream(asyncio.StreamReader, streams.AsyncStreamReaderMixin):
    ...


class MockClientResponse(ClientResponse):
    def __init__(self, method, url, request_info=...) -> None:
        ...
    
    async def json(self, *, encoding=..., loads=..., **kwargs): # -> Any | None:
        ...
    
    async def text(self, encoding=..., errors=...): # -> Any:
        ...
    
    async def read(self): # -> Any:
        ...
    
    def release(self): # -> None:
        ...
    
    @property
    def content(self): # -> MockStream:
        ...
    


def build_response(vcr_request, vcr_response, history):
    ...

def play_responses(cassette, vcr_request, kwargs):
    ...

async def record_response(cassette, vcr_request, response): # -> None:
    """Record a VCR request-response chain to the cassette."""
    ...

async def record_responses(cassette, vcr_request, response): # -> None:
    """Because aiohttp follows redirects by default, we must support
    them by default. This method is used to write individual
    request-response chains that were implicitly followed to get
    to the final destination.
    """
    ...

def vcr_request(cassette, real_request): # -> (self: Unknown, method: Unknown, url: Unknown, **kwargs: Unknown) -> Unknown:
    ...

