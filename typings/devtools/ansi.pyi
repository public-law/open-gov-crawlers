"""
This type stub file was generated by pyright.
"""

from enum import IntEnum
from typing import Any

__all__ = ('sformat', 'sprint')
MYPY = ...
if MYPY:
    ...
def strip_ansi(value): # -> str:
    ...

class Style(IntEnum):
    reset = ...
    bold = ...
    not_bold = ...
    dim = ...
    not_dim = ...
    italic = ...
    not_italic = ...
    underline = ...
    not_underline = ...
    blink = ...
    not_blink = ...
    reverse = ...
    not_reverse = ...
    strike_through = ...
    not_strike_through = ...
    black = ...
    red = ...
    green = ...
    yellow = ...
    blue = ...
    magenta = ...
    cyan = ...
    white = ...
    bg_black = ...
    bg_red = ...
    bg_green = ...
    bg_yellow = ...
    bg_blue = ...
    bg_magenta = ...
    bg_cyan = ...
    bg_white = ...
    function = ...
    def __call__(self, input: Any, *styles: Style, reset: bool = ..., apply: bool = ...) -> str:
        """
        Styles text with ANSI styles and returns the new string.

        By default the styling is cleared at the end of the string, this can be prevented with``reset=False``.

        Examples::

            print(sformat('Hello World!', sformat.green))
            print(sformat('ATTENTION!', sformat.bg_magenta))
            print(sformat('Some things', sformat.reverse, sformat.bold))

        :param input: the object to style with ansi codes.
        :param *styles: zero or more styles to apply to the text, should be either style instances or strings
                        matching style names.
        :param reset: if False the ansi reset code is not appended to the end of the string
        :param: apply: if False no ansi codes are applied
        """
        ...
    
    @property
    def styles(self): # -> MappingProxyType[str, Style]:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    


sformat = ...
class StylePrint:
    """
    Annoyingly enums do not allow inheritance, a lazy design mistake, this is an ugly work around
    for that mistake.
    """
    def __call__(self, input, *styles, reset=..., flush=..., file=..., **print_kwargs): # -> None:
        ...
    
    def __getattr__(self, item): # -> Any:
        ...
    
    def __repr__(self): # -> Literal['<pseudo function sprint(text, *styles)>']:
        ...
    


sprint = ...
