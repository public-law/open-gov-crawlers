"""
This type stub file was generated by pyright.
"""

from python_utils import types
from .bar import ProgressBar

"""
This type stub file was generated by pyright.
"""
if types.TYPE_CHECKING:
    ...
ANSI_TERMS = ...
ANSI_TERM_RE = ...
def is_ansi_terminal(fd: types.IO, is_terminal: bool | None = ...) -> bool:
    ...

def is_terminal(fd: types.IO, is_terminal: bool | None = ...) -> bool:
    ...

def deltas_to_seconds(*deltas, **kwargs) -> int | float | None:
    '''
    Convert timedeltas and seconds as int to seconds as float while coalescing

    >>> deltas_to_seconds(datetime.timedelta(seconds=1, milliseconds=234))
    1.234
    >>> deltas_to_seconds(123)
    123.0
    >>> deltas_to_seconds(1.234)
    1.234
    >>> deltas_to_seconds(None, 1.234)
    1.234
    >>> deltas_to_seconds(0, 1.234)
    0.0
    >>> deltas_to_seconds()
    Traceback (most recent call last):
    ...
    ValueError: No valid deltas passed to `deltas_to_seconds`
    >>> deltas_to_seconds(None)
    Traceback (most recent call last):
    ...
    ValueError: No valid deltas passed to `deltas_to_seconds`
    >>> deltas_to_seconds(default=0.0)
    0.0
    '''
    ...

def no_color(value: types.StringTypes) -> types.StringTypes:
    '''
    Return the `value` without ANSI escape codes

    >>> no_color(b'\u001b[1234]abc') == b'abc'
    True
    >>> str(no_color(u'\u001b[1234]abc'))
    'abc'
    >>> str(no_color('\u001b[1234]abc'))
    'abc'
    '''
    ...

def len_color(value: types.StringTypes) -> int:
    '''
    Return the length of `value` without ANSI escape codes

    >>> len_color(b'\u001b[1234]abc')
    3
    >>> len_color(u'\u001b[1234]abc')
    3
    >>> len_color('\u001b[1234]abc')
    3
    '''
    ...

def env_flag(name: str, default: bool | None = ...) -> bool | None:
    '''
    Accepts environt variables formatted as y/n, yes/no, 1/0, true/false,
    on/off, and returns it as a boolean

    If the environment variable is not defined, or has an unknown value,
    returns `default`
    '''
    ...

class WrappingIO:
    def __init__(self, target: types.IO, capturing: bool = ..., listeners: types.Set[ProgressBar] = ...) -> None:
        ...
    
    def __getattr__(self, name):
        ...
    
    def write(self, value: str) -> None:
        ...
    
    def flush(self) -> None:
        ...
    
    def flush_target(self) -> None:
        ...
    


class StreamWrapper:
    '''Wrap stdout and stderr globally'''
    def __init__(self) -> None:
        ...
    
    def start_capturing(self, bar: ProgressBar | None = ...) -> None:
        ...
    
    def stop_capturing(self, bar: ProgressBar | None = ...) -> None:
        ...
    
    def update_capturing(self) -> None:
        ...
    
    def wrap(self, stdout: bool = ..., stderr: bool = ...) -> None:
        ...
    
    def wrap_stdout(self) -> types.IO:
        ...
    
    def wrap_stderr(self) -> types.IO:
        ...
    
    def unwrap_excepthook(self) -> None:
        ...
    
    def wrap_excepthook(self) -> None:
        ...
    
    def unwrap(self, stdout: bool = ..., stderr: bool = ...) -> None:
        ...
    
    def unwrap_stdout(self) -> None:
        ...
    
    def unwrap_stderr(self) -> None:
        ...
    
    def needs_clear(self) -> bool:
        ...
    
    def flush(self) -> None:
        ...
    
    def excepthook(self, exc_type, exc_value, exc_traceback):
        ...
    


class AttributeDict(dict):
    '''
    A dict that can be accessed with .attribute

    >>> attrs = AttributeDict(spam=123)

    # Reading

    >>> attrs['spam']
    123
    >>> attrs.spam
    123

    # Read after update using attribute

    >>> attrs.spam = 456
    >>> attrs['spam']
    456
    >>> attrs.spam
    456

    # Read after update using dict access

    >>> attrs['spam'] = 123
    >>> attrs['spam']
    123
    >>> attrs.spam
    123

    # Read after update using dict access

    >>> del attrs.spam
    >>> attrs['spam']
    Traceback (most recent call last):
    ...
    KeyError: 'spam'
    >>> attrs.spam
    Traceback (most recent call last):
    ...
    AttributeError: No such attribute: spam
    >>> del attrs.spam
    Traceback (most recent call last):
    ...
    AttributeError: No such attribute: spam
    '''
    def __getattr__(self, name: str) -> int:
        ...
    
    def __setattr__(self, name: str, value: int) -> None:
        ...
    
    def __delattr__(self, name: str) -> None:
        ...
    


logger = ...
streams = ...
