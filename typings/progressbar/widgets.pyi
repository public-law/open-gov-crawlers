"""
This type stub file was generated by pyright.
"""

import abc
from python_utils import types
from .bar import ProgressBar

if types.TYPE_CHECKING:
    ...
MAX_DATE = ...
MAX_TIME = ...
MAX_DATETIME = ...
def string_or_lambda(input_): # -> (progress: Unknown, data: Unknown, width: Unknown) -> Unknown:
    ...

def create_wrapper(wrapper): # -> LiteralString | None:
    '''Convert a wrapper tuple or format string to a format string

    >>> create_wrapper('')

    >>> print(create_wrapper('a{}b'))
    a{}b

    >>> print(create_wrapper(('a', 'b')))
    a{}b
    '''
    ...

def wrapper(function, wrapper): # -> _Wrapped[(...), Unknown, (*args: Unknown, **kwargs: Unknown), str]:
    '''Wrap the output of a function in a template string or a tuple with
    begin/end strings

    '''
    ...

def create_marker(marker, wrap=...): # -> ((progress: Unknown, data: Unknown, width: Unknown) -> (Unknown | str)) | _Wrapped[(...), Unknown, (*args: Unknown, **kwargs: Unknown), str]:
    ...

class FormatWidgetMixin:
    '''Mixin to format widgets using a formatstring

    Variables available:
     - max_value: The maximum value (can be None with iterators)
     - value: The current value
     - total_seconds_elapsed: The seconds since the bar started
     - seconds_elapsed: The seconds since the bar started modulo 60
     - minutes_elapsed: The minutes since the bar started modulo 60
     - hours_elapsed: The hours since the bar started modulo 24
     - days_elapsed: The hours since the bar started
     - time_elapsed: Shortcut for HH:MM:SS time since the bar started including
       days
     - percentage: Percentage as a float
    '''
    required_values = ...
    def __init__(self, format, new_style=..., **kwargs) -> None:
        ...
    
    def get_format(self, progress, data, format=...): # -> Unknown:
        ...
    
    def __call__(self, progress, data, format=...):
        '''Formats the widget into a string'''
        ...
    


class WidthWidgetMixin:
    '''Mixing to make sure widgets are only visible if the screen is within a
    specified size range so the progressbar fits on both large and small
    screens..

    Variables available:
     - min_width: Only display the widget if at least `min_width` is left
     - max_width: Only display the widget if at most `max_width` is left

    >>> class Progress(object):
    ...     term_width = 0

    >>> WidthWidgetMixin(5, 10).check_size(Progress)
    False
    >>> Progress.term_width = 5
    >>> WidthWidgetMixin(5, 10).check_size(Progress)
    True
    >>> Progress.term_width = 10
    >>> WidthWidgetMixin(5, 10).check_size(Progress)
    True
    >>> Progress.term_width = 11
    >>> WidthWidgetMixin(5, 10).check_size(Progress)
    False
    '''
    def __init__(self, min_width=..., max_width=..., **kwargs) -> None:
        ...
    
    def check_size(self, progress: ProgressBar): # -> bool:
        ...
    


class WidgetBase(WidthWidgetMixin):
    __metaclass__ = abc.ABCMeta
    copy = ...
    @abc.abstractmethod
    def __call__(self, progress, data): # -> None:
        '''Updates the widget.

        progress - a reference to the calling ProgressBar
        '''
        ...
    


class AutoWidthWidgetBase(WidgetBase):
    '''The base class for all variable width widgets.

    This widget is much like the \\hfill command in TeX, it will expand to
    fill the line. You can use more than one in the same line, and they will
    all have the same width, and together will fill the line.
    '''
    @abc.abstractmethod
    def __call__(self, progress, data, width): # -> None:
        '''Updates the widget providing the total width the widget must fill.

        progress - a reference to the calling ProgressBar
        width - The total width the widget must fill
        '''
        ...
    


class TimeSensitiveWidgetBase(WidgetBase):
    '''The base class for all time sensitive widgets.

    Some widgets like timers would become out of date unless updated at least
    every `INTERVAL`
    '''
    INTERVAL = ...


class FormatLabel(FormatWidgetMixin, WidgetBase):
    '''Displays a formatted label

    >>> label = FormatLabel('%(value)s', min_width=5, max_width=10)
    >>> class Progress(object):
    ...     pass
    >>> label = FormatLabel('{value} :: {value:^6}', new_style=True)
    >>> str(label(Progress, dict(value='test')))
    'test ::  test '

    '''
    mapping = ...
    def __init__(self, format: str, **kwargs) -> None:
        ...
    
    def __call__(self, progress, data, **kwargs):
        ...
    


class Timer(FormatLabel, TimeSensitiveWidgetBase):
    '''WidgetBase which displays the elapsed seconds.'''
    def __init__(self, format=..., **kwargs) -> None:
        ...
    
    format_time = ...


class SamplesMixin(TimeSensitiveWidgetBase):
    '''
    Mixing for widgets that average multiple measurements

    Note that samples can be either an integer or a timedelta to indicate a
    certain amount of time

    >>> class progress:
    ...     last_update_time = datetime.datetime.now()
    ...     value = 1
    ...     extra = dict()

    >>> samples = SamplesMixin(samples=2)
    >>> samples(progress, None, True)
    (None, None)
    >>> progress.last_update_time += datetime.timedelta(seconds=1)
    >>> samples(progress, None, True) == (datetime.timedelta(seconds=1), 0)
    True

    >>> progress.last_update_time += datetime.timedelta(seconds=1)
    >>> samples(progress, None, True) == (datetime.timedelta(seconds=1), 0)
    True

    >>> samples = SamplesMixin(samples=datetime.timedelta(seconds=1))
    >>> _, value = samples(progress, None)
    >>> value
    [1, 1]

    >>> samples(progress, None, True) == (datetime.timedelta(seconds=1), 0)
    True
    '''
    def __init__(self, samples=..., key_prefix=..., **kwargs) -> None:
        ...
    
    def get_sample_times(self, progress, data):
        ...
    
    def get_sample_values(self, progress, data):
        ...
    
    def __call__(self, progress, data, delta=...): # -> tuple[Unknown, Unknown] | tuple[None, None]:
        ...
    


class ETA(Timer):
    '''WidgetBase which attempts to estimate the time of arrival.'''
    def __init__(self, format_not_started=..., format_finished=..., format=..., format_zero=..., format_NA=..., **kwargs) -> None:
        ...
    
    def __call__(self, progress, data, value=..., elapsed=...):
        '''Updates the widget to show the ETA or total time when finished.'''
        ...
    


class AbsoluteETA(ETA):
    '''Widget which attempts to estimate the absolute time of arrival.'''
    def __init__(self, format_not_started=..., format_finished=..., format=..., **kwargs) -> None:
        ...
    


class AdaptiveETA(ETA, SamplesMixin):
    '''WidgetBase which attempts to estimate the time of arrival.

    Uses a sampled average of the speed based on the 10 last updates.
    Very convenient for resuming the progress halfway.
    '''
    def __init__(self, **kwargs) -> None:
        ...
    
    def __call__(self, progress, data):
        ...
    


class DataSize(FormatWidgetMixin, WidgetBase):
    '''
    Widget for showing an amount of data transferred/processed.

    Automatically formats the value (assumed to be a count of bytes) with an
    appropriate sized unit, based on the IEC binary prefixes (powers of 1024).
    '''
    def __init__(self, variable=..., format=..., unit=..., prefixes=..., **kwargs) -> None:
        ...
    
    def __call__(self, progress, data):
        ...
    


class FileTransferSpeed(FormatWidgetMixin, TimeSensitiveWidgetBase):
    '''
    WidgetBase for showing the transfer speed (useful for file transfers).
    '''
    def __init__(self, format=..., inverse_format=..., unit=..., prefixes=..., **kwargs) -> None:
        ...
    
    def __call__(self, progress, data, value=..., total_seconds_elapsed=...):
        '''Updates the widget with the current SI prefixed speed.'''
        ...
    


class AdaptiveTransferSpeed(FileTransferSpeed, SamplesMixin):
    '''WidgetBase for showing the transfer speed, based on the last X samples
    '''
    def __init__(self, **kwargs) -> None:
        ...
    
    def __call__(self, progress, data):
        ...
    


class AnimatedMarker(TimeSensitiveWidgetBase):
    '''An animated marker for the progress bar which defaults to appear as if
    it were rotating.
    '''
    def __init__(self, markers=..., default=..., fill=..., marker_wrap=..., fill_wrap=..., **kwargs) -> None:
        ...
    
    def __call__(self, progress, data, width=...): # -> str:
        '''Updates the widget to show the next marker or the first marker when
        finished'''
        ...
    


RotatingMarker = AnimatedMarker
class Counter(FormatWidgetMixin, WidgetBase):
    '''Displays the current count'''
    def __init__(self, format=..., **kwargs) -> None:
        ...
    
    def __call__(self, progress, data, format=...):
        ...
    


class Percentage(FormatWidgetMixin, WidgetBase):
    '''Displays the current percentage as a number with a percent sign.'''
    def __init__(self, format=..., na=..., **kwargs) -> None:
        ...
    
    def get_format(self, progress, data, format=...): # -> str | Unknown:
        ...
    


class SimpleProgress(FormatWidgetMixin, WidgetBase):
    '''Returns progress as a count of the total (e.g.: "5 of 47")'''
    DEFAULT_FORMAT = ...
    def __init__(self, format=..., **kwargs) -> None:
        ...
    
    def __call__(self, progress, data, format=...):
        ...
    


class Bar(AutoWidthWidgetBase):
    '''A progress bar which stretches to fill the line.'''
    def __init__(self, marker=..., left=..., right=..., fill=..., fill_left=..., marker_wrap=..., **kwargs) -> None:
        '''Creates a customizable progress bar.

        The callable takes the same parameters as the `__call__` method

        marker - string or callable object to use as a marker
        left - string or callable object to use as a left border
        right - string or callable object to use as a right border
        fill - character to use for the empty part of the progress bar
        fill_left - whether to fill from the left or the right
        '''
        ...
    
    def __call__(self, progress, data, width): # -> str:
        '''Updates the progress bar and its subcomponents'''
        ...
    


class ReverseBar(Bar):
    '''A bar which has a marker that goes from right to left'''
    def __init__(self, marker=..., left=..., right=..., fill=..., fill_left=..., **kwargs) -> None:
        '''Creates a customizable progress bar.

        marker - string or updatable object to use as a marker
        left - string or updatable object to use as a left border
        right - string or updatable object to use as a right border
        fill - character to use for the empty part of the progress bar
        fill_left - whether to fill from the left or the right
        '''
        ...
    


class BouncingBar(Bar, TimeSensitiveWidgetBase):
    '''A bar which has a marker which bounces from side to side.'''
    INTERVAL = ...
    def __call__(self, progress, data, width): # -> str:
        '''Updates the progress bar and its subcomponents'''
        ...
    


class FormatCustomText(FormatWidgetMixin, WidgetBase):
    mapping = ...
    copy = ...
    def __init__(self, format, mapping=..., **kwargs) -> None:
        ...
    
    def update_mapping(self, **mapping): # -> None:
        ...
    
    def __call__(self, progress, data):
        ...
    


class VariableMixin:
    '''Mixin to display a custom user variable '''
    def __init__(self, name, **kwargs) -> None:
        ...
    


class MultiRangeBar(Bar, VariableMixin):
    '''
    A bar with multiple sub-ranges, each represented by a different symbol

    The various ranges are represented on a user-defined variable, formatted as

    .. code-block:: python

        [
            ['Symbol1', amount1],
            ['Symbol2', amount2],
            ...
        ]
    '''
    def __init__(self, name, markers, **kwargs) -> None:
        ...
    
    def get_values(self, progress, data): # -> list[Any]:
        ...
    
    def __call__(self, progress, data, width): # -> str:
        '''Updates the progress bar and its subcomponents'''
        ...
    


class MultiProgressBar(MultiRangeBar):
    def __init__(self, name, markers=..., **kwargs) -> None:
        ...
    
    def get_values(self, progress, data): # -> list[int]:
        ...
    


class GranularMarkers:
    smooth = ...
    bar = ...
    snake = ...
    fade_in = ...
    dots = ...
    growing_circles = ...


class GranularBar(AutoWidthWidgetBase):
    '''A progressbar that can display progress at a sub-character granularity
    by using multiple marker characters.

    Examples of markers:
     - Smooth: ` ▏▎▍▌▋▊▉█` (default)
     - Bar: ` ▁▂▃▄▅▆▇█`
     - Snake: ` ▖▌▛█`
     - Fade in: ` ░▒▓█`
     - Dots: ` ⡀⡄⡆⡇⣇⣧⣷⣿`
     - Growing circles: ` .oO`

    The markers can be accessed through GranularMarkers. GranularMarkers.dots
    for example
    '''
    def __init__(self, markers=..., left=..., right=..., **kwargs) -> None:
        '''Creates a customizable progress bar.

        markers - string of characters to use as granular progress markers. The
                  first character should represent 0% and the last 100%.
                  Ex: ` .oO`.
        left - string or callable object to use as a left border
        right - string or callable object to use as a right border
        '''
        ...
    
    def __call__(self, progress, data, width): # -> str:
        ...
    


class FormatLabelBar(FormatLabel, Bar):
    '''A bar which has a formatted label in the center.'''
    def __init__(self, format, **kwargs) -> None:
        ...
    
    def __call__(self, progress, data, width, format=...):
        ...
    


class PercentageLabelBar(Percentage, FormatLabelBar):
    '''A bar which displays the current percentage in the center.'''
    def __init__(self, format=..., na=..., **kwargs) -> None:
        ...
    


class Variable(FormatWidgetMixin, VariableMixin, WidgetBase):
    '''Displays a custom variable.'''
    def __init__(self, name, format=..., width=..., precision=..., **kwargs) -> None:
        '''Creates a Variable associated with the given name.'''
        ...
    
    def __call__(self, progress, data): # -> str:
        ...
    


class DynamicMessage(Variable):
    '''Kept for backwards compatibility, please use `Variable` instead.'''
    ...


class CurrentTime(FormatWidgetMixin, TimeSensitiveWidgetBase):
    '''Widget which displays the current (date)time with seconds resolution.'''
    INTERVAL = ...
    def __init__(self, format=..., microseconds=..., **kwargs) -> None:
        ...
    
    def __call__(self, progress, data):
        ...
    
    def current_datetime(self): # -> datetime:
        ...
    
    def current_time(self): # -> _Time:
        ...
    


